# Generated by Django 4.2.11 on 2024-04-22 13:49

from django.db import migrations


def load_data_from_json(apps, schema_editor):
    topics = [
    "Introduction to Computer Science",
    "Programming Fundamentals",
    "Data Structures",
    "Algorithms",
    "Computer Architecture",
    "Operating Systems",
    "Database Systems",
    "Networking",
    "Software Engineering",
    "Artificial Intelligence",
    "Theory of Computation",
    "Compiler Design",
    "Distributed Systems",
    "Computer Graphics",
    "Cryptography",
    "Parallel and Concurrent Programming",
    "Human-Computer Interaction",
    "Computer Vision",
    "Web Technologies",
    "Embedded Systems",
    "Data Mining and Analytics",
    "Software Quality Assurance",
    "Ethical and Social Implications of Computing",
    "Advanced Topics",
    "Automata Theory",
    "Formal Languages and Automata",
    "Computational Complexity",
    "Graph Theory",
    "Computational Geometry",
    "Numerical Analysis",
    "Machine Learning",
    "Deep Learning",
    "Natural Language Processing",
    "Reinforcement Learning",
    "Computer Security",
    "Network Security",
    "Information Retrieval",
    "Cloud Computing",
    "IoT (Internet of Things)",
    "Virtual Reality",
    "Augmented Reality",
    "Mobile Application Development",
    "Game Development",
    "Computer Animation",
    "Operating System Design",
    "Real-Time Systems",
    "Concurrency Control",
    "Transaction Processing",
    "Data Warehousing",
    "Big Data Technologies",
    "Data Science",
    "Business Intelligence",
    "Quantum Computing",
    "Bioinformatics",
    "Computational Biology",
    "Robotics",
    "Computer Ethics",
    "Privacy and Security in Computing",
    "Digital Forensics",
    "Cryptocurrency and Blockchain",
    "Social Network Analysis",
    "Cloud Security",
    "Edge Computing",
    "Compiler Optimization",
    "High-Performance Computing",
    "Grid Computing",
    "Fuzzy Logic and Systems",
    "Expert Systems",
    "Pattern Recognition",
    "Knowledge Representation and Reasoning",
    "Semantic Web",
    "Computer Algebra Systems",
    "Geographic Information Systems",
    "Wireless Sensor Networks",
    "Biometric Authentication",
    "Internet Security Protocols",
    "Software Testing and Debugging",
    "Agile Methodologies",
    "DevOps",
    "Continuous Integration and Continuous Deployment (CI/CD)",
    "Model-Driven Engineering",
    "User Interface Design",
    "Accessibility in Computing",
    "User Experience (UX) Design",
    "Game Theory",
    "Social Computing",
    "Computational Sociology",
    "Computational Linguistics",
    "Music Information Retrieval",
    "Ethics in Artificial Intelligence",
    "Algorithmic Game Theory",
    "Behavioral Economics and Computing",
    "Neuroinformatics",
    "Health Informatics",
    "Geometric Modeling",
    "Scientific Computing",
    "Information Theory",
    "System Modeling and Simulation",
    "Decision Support Systems",
    "Database Security and Privacy",
    "Knowledge Management Systems",
    "Information Visualization",
    "Geospatial Data Analysis",
    "Enterprise Architecture",
    "Supply Chain Management Systems",
    "Data Integration and Interoperability",
    "Software Reuse and Component-Based Development",
    "Legal and Regulatory Issues in Computing",
    "Information Assurance",
    "Systems Analysis and Design",
    "E-commerce Systems",
    "E-learning Systems",
    "Human-Robot Interaction",
    "Biologically Inspired Computing",
    "Social Robotics",
    "Humanoid Robotics",
    "Computational Neuroscience",
    "Affective Computing",
    "Explainable AI",
    "Robot Ethics",
    "Cyber-Physical Systems",
    "Internet of Medical Things (IoMT)",
    "Quantum Information Science",
    "Quantum Cryptography",
    "Quantum Algorithms",
    "Quantum Machine Learning",
    "Quantum Error Correction",
    "Quantum Networking"
]
    
    Topic = apps.get_model("api", "Topic")
    Topic.objects.all().delete()
    for topic in topics:
        try:
            Topic.objects.create(
                name=topic,
            )
        except Exception as e:
            print("Error:", str(e))

class Migration(migrations.Migration):

    dependencies = [
        ("api", "0011_auto_20240421_0406"),
    ]

    operations = [
        migrations.RunPython(load_data_from_json),
    ]
